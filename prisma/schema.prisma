// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  username  String
  email     String   @unique
  password  String
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id             String   @id @default(uuid()) @map("_id")
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  roleGroup      String[] @default([])
  avatar         String?
  avatarPublicId String?
  permissions    String[]
  status         String   @default("active")
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  token   String
  expires DateTime
  email   String   @unique
}

model Counter {
  id     String @id @default(uuid()) @map("_id")
  seqVal String
}

model NextSequence {
  id           String  @id @default(uuid()) @map("_id")
  name         String
  defaultValue String?
}

model RoleGroup {
  id          String   @id @default(uuid()) @map("_id")
  name        String   @unique
  description String?
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id        String   @id @default(uuid()) @map("_id")
  label     String
  name      String   @unique
  index     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id           String   @id @default(uuid()) @map("_id")
  code         String
  name         String
  telephone    String
  email        String
  address      String
  website      String?
  industry     String?
  logo         String?
  logoPublicId String?
  setting      Setting?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

type Setting {
  fiscalDate            DateTime?
  baseCurrency          String
  decimalNumber         Int
  accountingIntegration Boolean
  dateFormat            String?
  lang                  String
}
